name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Re-entra√Ænement hebdomadaire (Dimanche √† 2h)
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # JOB 1: Tests et Quality Checks
  # ============================================
  test:
    name: üß™ Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 isort
    
    - name: üé® Code formatting check (Black)
      run: black --check --diff .
      continue-on-error: true
    
    - name: üìê Import sorting check (isort)
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: üîç Linting (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: üß™ Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
      continue-on-error: true
    
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: üìà Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  # ============================================
  # JOB 2: Security Scan
  # ============================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üîç Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: üì§ Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # ============================================
  # JOB 3: Docker Build & Test
  # ============================================
  docker:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üî® Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: churn-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: üî® Build Dashboard Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.streamlit
        push: false
        tags: churn-dashboard:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: üß™ Test Docker Compose setup
      run: |
        docker compose version
        docker compose config
        echo "‚úÖ Docker Compose configuration is valid"

  # ============================================
  # JOB 4: Data Validation (if Snowflake available)
  # ============================================
  data_validation:
    name: üìä Data Validation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: ‚úÖ Validate data schema
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      run: |
        python data/validate_data.py || echo "‚ö†Ô∏è Data validation skipped (credentials not configured)"
      continue-on-error: true

  # ============================================
  # JOB 5: Build & Push Docker Images (on main)
  # ============================================
  publish:
    name: üì¶ Publish Docker Images
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîê Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üìù Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: üöÄ Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # JOB 6: Deployment Summary
  # ============================================
  summary:
    name: üìä Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()
    
    steps:
    - name: üìã Generate summary
      run: |
        echo "## üéâ MLOps Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| üß™ Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üîí Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üê≥ Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
    
    - name: ‚úÖ All checks passed
      if: needs.test.result == 'success' && needs.docker.result == 'success'
      run: echo "‚úÖ All pipeline checks passed successfully!"
    
    - name: ‚ö†Ô∏è Some checks failed
      if: needs.test.result != 'success' || needs.docker.result != 'success'
      run: echo "‚ö†Ô∏è Some pipeline checks failed. Please review the logs."