services:
  # MLflow Tracking Server
  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    container_name: mlflow_server
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./mlartifacts:/mlartifacts
    environment:
      - BACKEND_STORE_URI=sqlite:///mlruns/mlflow.db
      - ARTIFACT_ROOT=/mlartifacts
    command: >
      mlflow server
      --backend-store-uri sqlite:///mlruns/mlflow.db
      --default-artifact-root /mlartifacts
      --host 0.0.0.0
      --port 5000
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5000/\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # API de prédiction FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: churn_prediction_api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - LOG_LEVEL=INFO
    env_file:
      - .env
    volumes:
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
      - ./ready/models:/app/models
    depends_on:
      mlflow:
        condition: service_healthy
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard Streamlit
  # Dashboard Streamlit
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: streamlit_dashboard
    ports:
      - "8501:8501"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - API_URL=http://api:8000
    env_file:
      - .env
    volumes:
      # - ./ready/streamlit-app:/app/ready/streamlit-app  # ⬅️ COMMENTÉ TEMPORAIREMENT
      - ./artifacts:/app/artifacts
    depends_on:
      api:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    networks:
      - mlops-network
    restart: unless-stopped
    # Pas de command ici, on laisse le Dockerfile le gérer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL pour MLflow (optionnel, meilleur que SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: mlflow_postgres
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow123
      - POSTGRES_DB=mlflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus pour monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana pour visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # Redis pour caching (optionnel mais utile)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx pour reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      api:
        condition: service_healthy
      dashboard:
        condition: service_healthy
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  mlops-network:
    driver: bridge
    name: mlops-network

volumes:
  postgres-data:
    name: mlflow_postgres_data
  prometheus-data:
    name: prometheus_data
  grafana-data:
    name: grafana_data
  redis-data:
    name: redis_data